{"version":3,"file":"js/addon-entry-editor-theme3.js","sources":["webpack://GUI/./src/addons/addons/editor-theme3/black_text.css","webpack://GUI/./src/addons/addons/editor-theme3/color_on_black.css","webpack://GUI/./src/addons/addons/editor-theme3/color_on_white.css","webpack://GUI/./src/addons/addons/editor-theme3/theme3.css","webpack://GUI/./src/addons/addons/editor-theme3/_runtime_entry.js","webpack://GUI/./src/addons/addons/editor-theme3/theme3.js"],"sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"@namespace xlink url(\\\"http://www.w3.org/1999/xlink\\\");\\n\\n.scratchCategoryItemBubble::after {\\n  /* block-palette-icons */\\n  filter: brightness(0);\\n}\\n\\n.blocklyEditableText > text {\\n  fill: var(--editorTheme3-inputColor-blackText);\\n}\\n.blocklyHtmlInput {\\n  color: var(--editorTheme3-inputColor-blackText);\\n}\\n\\n[class*=\\\"blocks_blocks_\\\"] image[xlink|href$=\\\"/rotate-left.svg\\\"],\\n[class*=\\\"blocks_blocks_\\\"] image[xlink|href$=\\\"/rotate-right.svg\\\"],\\n[class*=\\\"blocks_blocks_\\\"] image[xlink|href$=\\\"/repeat.svg\\\"] {\\n  filter: invert(1) hue-rotate(180deg);\\n}\\n\\n.blocklyDropDownDiv .goog-menuitem,\\n.sa-contextmenu-colored .blocklyContextMenu .goog-menuitem .goog-menuitem-content {\\n  color: black;\\n}\\n.blocklyDropDownDiv .blocklyText {\\n  fill: black;\\n}\\n\\n/* Compatibility */\\n\\n.sa-block-color {\\n  --sa-block-text: black;\\n  --sa-block-gray-text: black;\\n  --sa-block-colored-text: var(--sa-block-background-tertiary);\\n  --sa-block-text-on-bright-background: black;\\n}\\n\", \"\"]);\n\n// exports\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".u-dropdown-searchbar {\\n  border-color: rgba(255, 255, 255, 0.15);\\n}\\n.u-dropdown-searchbar:focus {\\n  background-color: var(--editorTheme3-hoveredItem);\\n}\\n.blocklyDropDownDiv .goog-menuitem-checkbox {\\n  filter: brightness(0) invert(1);\\n}\\n\\n.scratchCommentRect {\\n  fill: #282828;\\n}\\n.scratchCommentBody,\\n.scratchCommentTextarea {\\n  background-color: #282828;\\n}\\n.scratchWorkspaceCommentBorder {\\n  stroke: var(--editorTheme3-commentColor);\\n}\\n.scratchCommentTextarea::placeholder {\\n  color: rgba(255, 255, 255, 0.5);\\n}\\n.scratchCommentText {\\n  fill: #ffffff;\\n  color: #ffffff;\\n}\\n\\n/* Compatibility */\\n\\n.sa-block-color {\\n  --sa-block-colored-background: var(--sa-block-background-secondary);\\n  --sa-block-colored-background-secondary: var(--sa-block-field-background);\\n  --sa-block-bright-background: var(--sa-block-background-tertiary);\\n  --sa-block-text: var(--sa-block-background-tertiary);\\n  --sa-block-gray-text: white;\\n  --sa-block-colored-text: var(--sa-block-background-tertiary);\\n  --sa-block-text-on-bright-background: white;\\n}\\n\", \"\"]);\n\n// exports\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".scratchCategoryItemBubble::after {\\n  /* block-palette-icons */\\n  filter: brightness(0);\\n  opacity: 0.6;\\n}\\n\\n.u-dropdown-searchbar,\\n.u-dropdown-searchbar:focus,\\n.blocklyDropDownDiv .goog-menuitem,\\n.sa-contextmenu-colored .blocklyContextMenu .goog-menuitem .goog-menuitem-content {\\n  color: #575e75;\\n}\\n.u-dropdown-searchbar:focus {\\n  background-color: var(--editorTheme3-hoveredItem);\\n}\\n\\n.blocklyAngleDragHandle {\\n  stroke: black;\\n  stroke-opacity: 0.15;\\n  paint-order: stroke fill;\\n}\\n\\n.scratchCommentRect {\\n  fill: #feffff;\\n}\\n.scratchCommentBody,\\n.scratchCommentTextarea {\\n  background-color: #ffffff;\\n}\\n.scratchWorkspaceCommentBorder {\\n  stroke: var(--editorTheme3-commentColor);\\n}\\n.scratchCommentTextarea::placeholder {\\n  color: rgba(0, 0, 0, 0.5);\\n}\\n.scratchCommentText {\\n  fill: #575e75;\\n  color: #575e75;\\n}\\n\\n/* Compatibility */\\n\\n.sa-block-color {\\n  --sa-block-colored-background: var(--sa-block-background-secondary);\\n  --sa-block-colored-background-secondary: var(--sa-block-field-background);\\n  --sa-block-bright-background: var(--sa-block-background-tertiary);\\n  --sa-block-text: var(--sa-block-background-tertiary);\\n  --sa-block-gray-text: #575e75;\\n  --sa-block-colored-text: var(--sa-block-background-tertiary);\\n  --sa-block-text-on-bright-background: white;\\n}\\n\", \"\"]);\n\n// exports\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".blocklyEditableText > text {\\n  fill: var(--editorTheme3-inputColor-text);\\n}\\n.blocklyHtmlInput {\\n  background-color: var(--editorTheme3-inputColor);\\n  color: var(--editorTheme3-inputColor-text);\\n}\\n\\n.blocklyDropDownDiv .goog-menuitem-highlight,\\n.blocklyDropDownDiv .goog-menuitem-hover,\\n.sa-contextmenu-colored .blocklyContextMenu .goog-menuitem-highlight {\\n  background-color: var(--editorTheme3-hoveredItem, rgba(0, 0, 0, 0.2));\\n}\\n\\n.scratchCommentRect {\\n  fill: var(--editorTheme3-commentColor);\\n}\\n.scratchCommentBody,\\n.scratchCommentTextarea {\\n  background-color: var(--editorTheme3-commentColor);\\n}\\n.scratchWorkspaceCommentBorder {\\n  stroke: var(--editorTheme3-commentBorder);\\n}\\n.scratchCommentTextarea::placeholder {\\n  color: var(--editorTheme3-commentTextTransparent);\\n}\\n.scratchCommentText {\\n  fill: var(--editorTheme3-commentText);\\n  color: var(--editorTheme3-commentText);\\n}\\n\", \"\"]);\n\n// exports\n","/* generated by pull.js */\nimport _js from \"./theme3.js\";\nimport _css from \"!css-loader!./theme3.css\";\nimport _css2 from \"!css-loader!./black_text.css\";\nimport _css3 from \"!css-loader!./color_on_white.css\";\nimport _css4 from \"!css-loader!./color_on_black.css\";\nexport const resources = {\n  \"theme3.js\": _js,\n  \"theme3.css\": _css,\n  \"black_text.css\": _css2,\n  \"color_on_white.css\": _css3,\n  \"color_on_black.css\": _css4,\n};\n","import {\n  removeAlpha,\n  multiply,\n  brighten,\n  alphaBlend,\n  recolorFilter,\n} from \"../../libraries/common/cs/text-color.esm.js\";\n\nconst dataUriRegex = new RegExp(\"^data:image/svg\\\\+xml;base64,([A-Za-z0-9+/=]*)$\");\nconst extensionsCategory = {\n  id: null,\n  settingId: \"Pen-color\",\n  colorId: \"pen\",\n};\nconst twCategory = {\n  id: null,\n  settingId: \"tw-color\",\n  colorId: \"tw\"\n};\nconst saCategory = {\n  settingId: \"sa-color\",\n  colorId: \"sa\",\n};\nconst categories = [\n  {\n    id: \"motion\",\n    settingId: \"motion-color\",\n    colorId: \"motion\",\n  },\n  {\n    id: \"looks\",\n    settingId: \"looks-color\",\n    colorId: \"looks\",\n  },\n  {\n    id: \"sound\",\n    settingId: \"sounds-color\",\n    colorId: \"sounds\",\n  },\n  {\n    id: \"events\",\n    settingId: \"events-color\",\n    colorId: \"event\",\n  },\n  {\n    id: \"control\",\n    settingId: \"control-color\",\n    colorId: \"control\",\n  },\n  {\n    id: \"sensing\",\n    settingId: \"sensing-color\",\n    colorId: \"sensing\",\n  },\n  {\n    id: \"operators\",\n    settingId: \"operators-color\",\n    colorId: \"operators\",\n  },\n  {\n    id: \"variables\",\n    settingId: \"data-color\",\n    colorId: \"data\",\n  },\n  {\n    id: \"lists\",\n    settingId: \"data-lists-color\",\n    colorId: \"data_lists\",\n  },\n  {\n    id: \"myBlocks\",\n    settingId: \"custom-color\",\n    colorId: \"more\",\n  },\n  extensionsCategory,\n  twCategory,\n  saCategory,\n];\n\nexport default async function ({ addon, console }) {\n  const Blockly = await addon.tab.traps.getBlockly();\n\n  const originalColors = JSON.parse(JSON.stringify(Blockly.Colours));\n  originalColors.sa = {\n    primary: \"#29beb8\",\n    secondary: \"#3aa8a4\",\n    tertiary: \"#3aa8a4\",\n  };\n  originalColors.tw = {\n    primary: \"#ff4c4c\",\n    secondary: \"#e64444\",\n    tertiary: \"#e64444\"\n  };\n\n  let textModeSetting = addon.settings.get(\"text\");\n  const textMode = () => (addon.self.disabled ? \"white\" : textModeSetting);\n  const isColoredTextMode = () => textMode() === \"colorOnWhite\" || textMode() === \"colorOnBlack\";\n\n  const primaryColor = (category) => {\n    if (addon.self.disabled) return originalColors[category.colorId].primary;\n    // Colored on white: can't use #ffffff because of editor-dark-mode dropdown div handling\n    if (textMode() === \"colorOnWhite\") return \"#feffff\";\n    if (textMode() === \"colorOnBlack\") return \"#282828\";\n    return addon.settings.get(category.settingId);\n  };\n  const secondaryColor = (category) => {\n    if (addon.self.disabled) return originalColors[category.colorId].secondary;\n    if (isColoredTextMode())\n      return alphaBlend(primaryColor(category), multiply(addon.settings.get(category.settingId), { a: 0.15 }));\n    if (textMode() === \"black\") return brighten(addon.settings.get(category.settingId), { r: 0.6, g: 0.6, b: 0.6 });\n    return multiply(addon.settings.get(category.settingId), { r: 0.9, g: 0.9, b: 0.9 });\n  };\n  const tertiaryColor = (category) => {\n    if (addon.self.disabled) return originalColors[category.colorId].tertiary;\n    if (isColoredTextMode()) return addon.settings.get(category.settingId);\n    if (textMode() === \"black\") return multiply(addon.settings.get(category.settingId), { r: 0.65, g: 0.65, b: 0.65 });\n    return multiply(addon.settings.get(category.settingId), { r: 0.8, g: 0.8, b: 0.8 });\n  };\n  const fieldBackground = (category) => {\n    // Background color for open dropdowns and (in some textModes) Boolean inputs\n    // The argument can be a block, field, or category\n    if (category instanceof Blockly.Block || category instanceof Blockly.Field) {\n      const block = category instanceof Blockly.Block ? category : category.sourceBlock_;\n      if (isColoredTextMode() || textMode() === \"black\") {\n        let primary;\n        if (block.isShadow() && block.getParent()) primary = block.getParent().getColour();\n        else primary = block.getColour();\n        if (isColoredTextMode()) return alphaBlend(primary, multiply(block.getColourTertiary(), { a: 0.25 }));\n        else return brighten(primary, { r: 0.4, g: 0.4, b: 0.4 });\n      }\n      return block.getColourTertiary();\n    }\n    if (isColoredTextMode())\n      return alphaBlend(primaryColor(category), multiply(addon.settings.get(category.settingId), { a: 0.25 }));\n    if (textMode() === \"black\") return brighten(primaryColor(category), { r: 0.4, g: 0.4, b: 0.4 });\n    return tertiaryColor(category);\n  };\n  const textColor = (field) => {\n    if (addon.self.disabled || textMode() === \"white\") return \"#ffffff\";\n    if (textMode() === \"black\") return \"#000000\";\n    if (field) return field.sourceBlock_.getColourTertiary();\n    return \"#000000\";\n  };\n  const uncoloredTextColor = () => {\n    if (addon.self.disabled) return \"#ffffff\";\n    return {\n      white: \"#ffffff\",\n      black: \"#575e75\",\n      colorOnWhite: \"#575e75\",\n      colorOnBlack: \"#ffffff\",\n    }[textMode];\n  };\n  const otherColor = (settingId, colorId) => {\n    if (addon.self.disabled) return originalColors[colorId];\n    return addon.settings.get(settingId);\n  };\n\n  // Blockly doesn't handle colors with transparency\n  const oldBlockMakeColor = Blockly.Block.prototype.makeColour_;\n  Blockly.Block.prototype.makeColour_ = function (color) {\n    if (typeof color === \"string\" && /^#(?:[0-9A-Za-z]{2}){3,4}$/.test(color)) return color;\n    return oldBlockMakeColor(color);\n  };\n\n  const oldCategoryCreateDom = Blockly.Toolbox.Category.prototype.createDom;\n  Blockly.Toolbox.Category.prototype.createDom = function () {\n    // Category bubbles\n    if (this.iconURI_) {\n      if (addon.self.disabled) return oldCategoryCreateDom.call(this);\n      if (![\"sa-blocks\", \"videoSensing\", \"text2speech\"].includes(this.id_)) return oldCategoryCreateDom.call(this);\n\n      const match = dataUriRegex.exec(this.iconURI_);\n      if (match) {\n        const oldSvg = atob(match[1]);\n        const category = this.id_ === \"sa-blocks\" ? saCategory : extensionsCategory;\n        const newColor = isColoredTextMode ? tertiaryColor(category) : primaryColor(category);\n        if (newColor) {\n          const newSvg = oldSvg.replace(/#29beb8|#0ebd8c/gi, newColor);\n          this.iconURI_ = `data:image/svg+xml;base64,${btoa(newSvg)}`;\n        }\n      }\n    }\n    oldCategoryCreateDom.call(this);\n    if (this.iconURI_) return;\n    const category = categories.find((item) => item.id === this.id_);\n    if (!category) return;\n    this.bubble_.style.backgroundColor = isColoredTextMode() ? fieldBackground(category) : primaryColor(category);\n    this.bubble_.style.borderColor = tertiaryColor(category);\n  };\n\n  const oldBlockSetColour = Blockly.Block.prototype.setColour;\n  Blockly.Block.prototype.setColour = function (colour, colourSecondary, colourTertiary) {\n    // Extension blocks (color is set by VM)\n    if (colour.toLowerCase() === originalColors.pen.primary.toLowerCase()) {\n      colour = primaryColor(extensionsCategory);\n      colourSecondary = secondaryColor(extensionsCategory);\n      colourTertiary = tertiaryColor(extensionsCategory);\n    }\n    // TurboWarp Blocks\n    if (this.type.startsWith(\"tw_\")) {\n      colour = primaryColor(twCategory);\n      colourSecondary = secondaryColor(twCategory);\n      colourTertiary = tertiaryColor(twCategory);\n    }\n    return oldBlockSetColour.call(this, colour, colourSecondary, colourTertiary);\n  };\n\n  const oldBlockUpdateColour = Blockly.BlockSvg.prototype.updateColour;\n  Blockly.BlockSvg.prototype.updateColour = function () {\n    oldBlockUpdateColour.call(this);\n    // Boolean inputs\n    if (isColoredTextMode()) {\n      for (const input of this.inputList) {\n        if (input.outlinePath) {\n          input.outlinePath.setAttribute(\"fill\", fieldBackground(this));\n        }\n      }\n    }\n  };\n\n  const oldBlockShowContextMenu = Blockly.BlockSvg.prototype.showContextMenu_;\n  Blockly.BlockSvg.prototype.showContextMenu_ = function (e) {\n    Blockly.WidgetDiv.DIV.style.setProperty(\"--editorTheme3-hoveredItem\", fieldBackground(this));\n    return oldBlockShowContextMenu.call(this, e);\n  };\n\n  const oldFieldLabelInit = Blockly.FieldLabel.prototype.init;\n  Blockly.FieldLabel.prototype.init = function () {\n    // Labels\n    oldFieldLabelInit.call(this);\n    this.textElement_.style.fill = textColor(this);\n  };\n\n  const oldFieldTextInputInit = Blockly.FieldTextInput.prototype.init;\n  Blockly.FieldTextInput.prototype.init = function () {\n    // Text inputs\n    oldFieldTextInputInit.call(this);\n    if (this.sourceBlock_.isShadow()) return;\n    // Labels in custom block editor\n    this.box_.setAttribute(\"fill\", fieldBackground(this));\n  };\n\n  const oldFieldDropdownInit = Blockly.FieldDropdown.prototype.init;\n  Blockly.FieldDropdown.prototype.init = function () {\n    // Dropdowns\n    oldFieldDropdownInit.call(this);\n    this.textElement_.style.setProperty(\"fill\", textColor(this), \"important\");\n    if (textColor(this) !== \"#ffffff\") this.arrow_.style.filter = recolorFilter(textColor(this));\n  };\n\n  const oldFieldDropdownShowEditor = Blockly.FieldDropdown.prototype.showEditor_;\n  Blockly.FieldDropdown.prototype.showEditor_ = function () {\n    oldFieldDropdownShowEditor.call(this);\n\n    // Open dropdowns\n    if (!this.disableColourChange_) {\n      if (this.sourceBlock_.isShadow()) {\n        this.sourceBlock_.setShadowColour(fieldBackground(this));\n      } else if (this.box_) {\n        this.box_.setAttribute(\"fill\", fieldBackground(this));\n      }\n    }\n\n    // Dropdown menus\n    let primaryColor;\n    if (this.sourceBlock_.isShadow() && this.sourceBlock_.getParent())\n      primaryColor = this.sourceBlock_.getParent().getColour();\n    else primaryColor = this.sourceBlock_.getColour();\n    Blockly.DropDownDiv.DIV_.style.backgroundColor = removeAlpha(primaryColor);\n    if (isColoredTextMode()) {\n      Blockly.DropDownDiv.getContentDiv().style.setProperty(\"--editorTheme3-hoveredItem\", fieldBackground(this));\n    } else {\n      Blockly.DropDownDiv.getContentDiv().style.removeProperty(\"--editorTheme3-hoveredItem\");\n    }\n  };\n\n  const oldFieldVariableInit = Blockly.FieldVariable.prototype.init;\n  Blockly.FieldVariable.prototype.init = function () {\n    // Variable dropdowns\n    oldFieldVariableInit.call(this);\n    this.textElement_.style.setProperty(\"fill\", textColor(this), \"important\");\n  };\n\n  const oldFieldVariableGetterInit = Blockly.FieldVariableGetter.prototype.init;\n  Blockly.FieldVariableGetter.prototype.init = function () {\n    // Variable reporters\n    oldFieldVariableGetterInit.call(this);\n    this.textElement_.style.fill = textColor(this);\n  };\n\n  const oldFieldMatrixUpdateMatrix = Blockly.FieldMatrix.prototype.updateMatrix_;\n  Blockly.FieldMatrix.prototype.updateMatrix_ = function () {\n    // Matrix inputs\n    oldFieldMatrixUpdateMatrix.call(this);\n    for (let i = 0; i < this.matrix_.length; i++) {\n      if (this.matrix_[i] !== \"0\") {\n        this.fillMatrixNode_(this.ledButtons_, i, uncoloredTextColor());\n        this.fillMatrixNode_(this.ledThumbNodes_, i, uncoloredTextColor());\n      }\n    }\n  };\n\n  const oldFieldMatrixCreateButton = Blockly.FieldMatrix.prototype.createButton_;\n  Blockly.FieldMatrix.prototype.createButton_ = function (fill) {\n    if (fill === \"#FFFFFF\") fill = uncoloredTextColor();\n    return oldFieldMatrixCreateButton.call(this, fill);\n  };\n\n  const oldFieldVerticalSeparatorInit = Blockly.FieldVerticalSeparator.prototype.init;\n  Blockly.FieldVerticalSeparator.prototype.init = function () {\n    // Vertical line between extension icon and block label\n    oldFieldVerticalSeparatorInit.call(this);\n    if (textMode() === \"black\") this.lineElement_.setAttribute(\"stroke\", this.sourceBlock_.getColourTertiary());\n  };\n\n  const updateColors = () => {\n    const vm = addon.tab.traps.vm;\n\n    textModeSetting = addon.settings.get(\"text\");\n\n    for (const category of categories) {\n      // CSS variables are used for compatibility with other addons\n      const prefix = `--editorTheme3-${category.colorId}`;\n      for (const [name, value] of Object.entries({\n        primary: primaryColor(category),\n        secondary: secondaryColor(category),\n        tertiary: tertiaryColor(category),\n        field: fieldBackground(category),\n      })) {\n        document.documentElement.style.setProperty(`${prefix}-${name}`, value);\n      }\n\n      // Update Blockly.Colours\n      if (!Blockly.Colours[category.colorId]) continue;\n      Blockly.Colours[category.colorId].primary = primaryColor(category);\n      Blockly.Colours[category.colorId].secondary = secondaryColor(category);\n      Blockly.Colours[category.colorId].tertiary = tertiaryColor(category);\n    }\n    addon.tab.setCustomBlockColor({\n      color: primaryColor(saCategory),\n      secondaryColor: secondaryColor(saCategory),\n      tertiaryColor: tertiaryColor(saCategory),\n    });\n    Blockly.Colours.textField = otherColor(\"input-color\", \"textField\");\n    if (uncoloredTextColor() === \"#575e75\") Blockly.Colours.fieldShadow = \"rgba(0, 0, 0, 0.15)\";\n    else Blockly.Colours.fieldShadow = originalColors.fieldShadow;\n\n    const workspace = Blockly.getMainWorkspace();\n    const flyout = workspace.getFlyout();\n    const toolbox = workspace.getToolbox();\n\n    // Reload toolbox\n    if (vm.editingTarget) {\n      vm.emitWorkspaceUpdate();\n    }\n    const flyoutWorkspace = flyout.getWorkspace();\n    Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.Xml.workspaceToDom(flyoutWorkspace), flyoutWorkspace);\n    toolbox.populate_(workspace.options.languageTree);\n    workspace.toolboxRefreshEnabled_ = true;\n  };\n\n  updateColors();\n  addon.settings.addEventListener(\"change\", updateColors);\n  addon.self.addEventListener(\"disabled\", updateColors);\n  addon.self.addEventListener(\"reenabled\", updateColors);\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}