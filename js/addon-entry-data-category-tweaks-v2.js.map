{"version":3,"file":"js/addon-entry-data-category-tweaks-v2.js","sources":["webpack://GUI/./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js","webpack://GUI/./src/addons/addons/data-category-tweaks-v2/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","export default async function ({ addon, console, msg, safeMsg }) {\n  const ScratchBlocks = await addon.tab.traps.getBlockly();\n\n  const SMALL_GAP = 8;\n  const BIG_GAP = 24;\n\n  const vm = addon.tab.traps.vm;\n\n  // Used in setting change handler. Updated in getBlocksXML.\n  // (Yes this is weird but it's how it was originally and I'm too scared to change it)\n  let hasSeparateListCategory = false;\n\n  const separateVariablesByType = (toolboxXML) => {\n    const listButtonIndex = toolboxXML.findIndex(\n      (i) => i.getAttribute(\"callbackkey\") === \"CREATE_LIST\" || i.getAttribute(\"type\") === \"data_addtolist\"\n    );\n    return {\n      variables: toolboxXML.slice(0, listButtonIndex),\n      lists: toolboxXML.slice(listButtonIndex, toolboxXML.length),\n    };\n  };\n\n  const separateLocalVariables = (workspace, toolboxXML) => {\n    const { variables, lists } = separateVariablesByType(toolboxXML);\n\n    const makeLabel = (l10n) => {\n      const label = document.createElement(\"label\");\n      label.setAttribute(\"text\", msg(l10n));\n      return label;\n    };\n\n    const fixGaps = (variables) => {\n      if (variables.length > 0) {\n        for (var i = 0; i < variables.length - 1; i++) {\n          variables[i].setAttribute(\"gap\", SMALL_GAP);\n        }\n        variables[i].setAttribute(\"gap\", BIG_GAP);\n      }\n    };\n\n    const separateVariablesByScope = (xml) => {\n      const before = [];\n      const global = [];\n      const local = [];\n      const after = [];\n\n      for (const blockXML of xml) {\n        if (blockXML.hasAttribute(\"id\")) {\n          const id = blockXML.getAttribute(\"id\");\n          const variable = workspace.getVariableById(id);\n          if (!variable || !variable.isLocal) {\n            global.push(blockXML);\n          } else {\n            local.push(blockXML);\n          }\n        } else if (global.length || local.length) {\n          after.push(blockXML);\n        } else {\n          before.push(blockXML);\n        }\n      }\n\n      const result = before;\n\n      if (global.length) {\n        result.push(makeLabel(\"for-all-sprites\"));\n        fixGaps(global);\n        result.push(...global);\n      }\n\n      if (local.length) {\n        result.push(makeLabel(\"for-this-sprite-only\"));\n        fixGaps(local);\n        result.push(...local);\n      }\n\n      return result.concat(after);\n    };\n\n    return separateVariablesByScope(variables).concat(separateVariablesByScope(lists));\n  };\n\n  const moveReportersDown = (toolboxXML) => {\n    const { variables, lists } = separateVariablesByType(toolboxXML);\n\n    const moveReportersToEnd = (xml) => {\n      const reporters = [];\n      const everythingElse = [];\n\n      for (const blockXML of xml) {\n        if (blockXML.hasAttribute(\"id\") || blockXML.tagName === \"BUTTON\") {\n          // Round reporters and the create variable button\n          reporters.push(blockXML);\n        } else {\n          // Everything else like \"change variable by 1\"\n          everythingElse.push(blockXML);\n        }\n      }\n\n      if (everythingElse.length) {\n        everythingElse[everythingElse.length - 1].setAttribute(\"gap\", BIG_GAP);\n      }\n\n      return everythingElse.concat(reporters);\n    };\n\n    return moveReportersToEnd(variables).concat(moveReportersToEnd(lists));\n  };\n\n  const DataCategory = ScratchBlocks.DataCategory;\n  let variableCategory;\n  let listCategory;\n  const variableCategoryCallback = (workspace) => {\n    let result = DataCategory(workspace);\n\n    if (!addon.self.disabled && addon.settings.get(\"moveReportersDown\")) {\n      result = moveReportersDown(result);\n    }\n\n    if (!addon.self.disabled && addon.settings.get(\"separateLocalVariables\")) {\n      result = separateLocalVariables(workspace, result);\n    }\n\n    if (addon.self.disabled || !hasSeparateListCategory) {\n      return result;\n    }\n\n    const { variables, lists } = separateVariablesByType(result);\n    variableCategory = variables;\n    listCategory = lists;\n    return variableCategory;\n  };\n  const listCategoryCallback = () => {\n    // Computed in variable category callback, which should be called before this method.\n    return listCategory;\n  };\n\n  // Each time a new workspace is made, these callbacks are reset, so re-register whenever a flyout is shown.\n  // https://github.com/LLK/scratch-blocks/blob/61f02e4cac0f963abd93013842fe536ef24a0e98/core/flyout_base.js#L469\n  const oldShow = ScratchBlocks.Flyout.prototype.show;\n  ScratchBlocks.Flyout.prototype.show = function (xmlList) {\n    this.workspace_.registerToolboxCategoryCallback(\"VARIABLE\", variableCategoryCallback);\n    this.workspace_.registerToolboxCategoryCallback(\"LIST\", listCategoryCallback);\n    return oldShow.call(this, xmlList);\n  };\n\n  // Use Scratch's extension category mechanism to replace the data category with our own.\n  // https://github.com/LLK/scratch-gui/blob/ddd2fa06f2afa140a46ec03be91796ded861e65c/src/containers/blocks.jsx#L344\n  // https://github.com/LLK/scratch-gui/blob/2ceab00370ad7bd8ecdf5c490e70fd02152b3e2a/src/lib/make-toolbox-xml.js#L763\n  // https://github.com/LLK/scratch-vm/blob/a0c11d6d8664a4f2d55632e70630d09ec6e9ae28/src/engine/runtime.js#L1381\n  const originalGetBlocksXML = vm.runtime.getBlocksXML;\n  vm.runtime.getBlocksXML = function (target) {\n    const result = originalGetBlocksXML.call(this, target);\n    hasSeparateListCategory = addon.settings.get(\"separateListCategory\");\n    if (!addon.self.disabled && hasSeparateListCategory) {\n      result.push({\n        id: \"data\",\n        xml: `\n        <category\n          name=\"%{BKY_CATEGORY_VARIABLES}\"\n          id=\"variables\"\n          colour=\"#FF8C1A\"\n          secondaryColour=\"#DB6E00\"\n          custom=\"VARIABLE\">\n        </category>\n        <category\n          name=\"${safeMsg(\"list-category\")}\"\n          id=\"lists\"\n          colour=\"#FF661A\"\n          secondaryColour=\"#FF5500\"\n          custom=\"LIST\">\n        </category>`,\n      });\n    }\n    return result;\n  };\n\n  // If editingTarget is set, the editor has already rendered and we have to tell it to rerender.\n  if (vm.editingTarget) {\n    vm.emitWorkspaceUpdate();\n  }\n\n  addon.settings.addEventListener(\"change\", (e) => {\n    // When the separate list category option changes, we need to do a workspace update.\n    // For all other options, just refresh the toolbox.\n    // Always doing both of these in response to a settings change causes many issues.\n    if (addon.settings.get(\"separateListCategory\") !== hasSeparateListCategory) {\n      if (vm.editingTarget) {\n        vm.emitWorkspaceUpdate();\n      }\n    } else {\n      const workspace = Blockly.getMainWorkspace();\n      if (workspace) {\n        workspace.refreshToolboxSelection_();\n      }\n    }\n  });\n\n  const dynamicEnableOrDisable = () => {\n    // Enabling/disabling is similar to changing settings.\n    // If separate list category is enabled, a workspace update is needed.\n    // If any other setting is enabled, refresh the toolbox.\n    if (addon.settings.get(\"separateListCategory\")) {\n      if (vm.editingTarget) {\n        vm.emitWorkspaceUpdate();\n      }\n    }\n    if (addon.settings.get(\"separateLocalVariables\") || addon.settings.get(\"moveReportersDown\")) {\n      const workspace = Blockly.getMainWorkspace();\n      if (workspace) {\n        workspace.refreshToolboxSelection_();\n      }\n    }\n  };\n\n  addon.self.addEventListener(\"disabled\", () => {\n    dynamicEnableOrDisable();\n  });\n  addon.self.addEventListener(\"reenabled\", () => {\n    dynamicEnableOrDisable();\n  });\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}